/*
 * This file is auto-generated.  DO NOT MODIFY.
 * Original file: C:\\Users\\lyl\\Desktop\\MissSchedule\\factory\\src\\main\\aidl\\net\\qiujuer\\tips\\factory\\service\\IMissServiceInterface.aidl
 */
package net.qiujuer.tips.factory.service;
public interface IMissServiceInterface extends android.os.IInterface
{
/** Local-side IPC implementation stub class. */
public static abstract class Stub extends android.os.Binder implements net.qiujuer.tips.factory.service.IMissServiceInterface
{
private static final java.lang.String DESCRIPTOR = "net.qiujuer.tips.factory.service.IMissServiceInterface";
/** Construct the stub at attach it to the interface. */
public Stub()
{
this.attachInterface(this, DESCRIPTOR);
}
/**
 * Cast an IBinder object into an net.qiujuer.tips.factory.service.IMissServiceInterface interface,
 * generating a proxy if needed.
 */
public static net.qiujuer.tips.factory.service.IMissServiceInterface asInterface(android.os.IBinder obj)
{
if ((obj==null)) {
return null;
}
android.os.IInterface iin = obj.queryLocalInterface(DESCRIPTOR);
if (((iin!=null)&&(iin instanceof net.qiujuer.tips.factory.service.IMissServiceInterface))) {
return ((net.qiujuer.tips.factory.service.IMissServiceInterface)iin);
}
return new net.qiujuer.tips.factory.service.IMissServiceInterface.Stub.Proxy(obj);
}
@Override public android.os.IBinder asBinder()
{
return this;
}
@Override public boolean onTransact(int code, android.os.Parcel data, android.os.Parcel reply, int flags) throws android.os.RemoteException
{
switch (code)
{
case INTERFACE_TRANSACTION:
{
reply.writeString(DESCRIPTOR);
return true;
}
case TRANSACTION_order:
{
data.enforceInterface(DESCRIPTOR);
this.order();
reply.writeNoException();
return true;
}
case TRANSACTION_orderAsync:
{
data.enforceInterface(DESCRIPTOR);
this.orderAsync();
reply.writeNoException();
return true;
}
case TRANSACTION_destroy:
{
data.enforceInterface(DESCRIPTOR);
this.destroy();
reply.writeNoException();
return true;
}
case TRANSACTION_add:
{
data.enforceInterface(DESCRIPTOR);
long _arg0;
_arg0 = data.readLong();
this.add(_arg0);
reply.writeNoException();
return true;
}
case TRANSACTION_edit:
{
data.enforceInterface(DESCRIPTOR);
long _arg0;
_arg0 = data.readLong();
this.edit(_arg0);
reply.writeNoException();
return true;
}
case TRANSACTION_delete:
{
data.enforceInterface(DESCRIPTOR);
java.lang.String _arg0;
_arg0 = data.readString();
int _arg1;
_arg1 = data.readInt();
this.delete(_arg0, _arg1);
reply.writeNoException();
return true;
}
case TRANSACTION_addContact:
{
data.enforceInterface(DESCRIPTOR);
long _arg0;
_arg0 = data.readLong();
this.addContact(_arg0);
reply.writeNoException();
return true;
}
case TRANSACTION_editContact:
{
data.enforceInterface(DESCRIPTOR);
long _arg0;
_arg0 = data.readLong();
this.editContact(_arg0);
reply.writeNoException();
return true;
}
case TRANSACTION_deleteContact:
{
data.enforceInterface(DESCRIPTOR);
java.lang.String _arg0;
_arg0 = data.readString();
this.deleteContact(_arg0);
reply.writeNoException();
return true;
}
case TRANSACTION_sync:
{
data.enforceInterface(DESCRIPTOR);
this.sync();
reply.writeNoException();
return true;
}
case TRANSACTION_refreshDesktop:
{
data.enforceInterface(DESCRIPTOR);
int _arg0;
_arg0 = data.readInt();
this.refreshDesktop(_arg0);
reply.writeNoException();
return true;
}
case TRANSACTION_getMissBean:
{
data.enforceInterface(DESCRIPTOR);
net.qiujuer.tips.factory.service.bean.MissServiceBean _result = this.getMissBean();
reply.writeNoException();
if ((_result!=null)) {
reply.writeInt(1);
_result.writeToParcel(reply, android.os.Parcelable.PARCELABLE_WRITE_RETURN_VALUE);
}
else {
reply.writeInt(0);
}
return true;
}
}
return super.onTransact(code, data, reply, flags);
}
private static class Proxy implements net.qiujuer.tips.factory.service.IMissServiceInterface
{
private android.os.IBinder mRemote;
Proxy(android.os.IBinder remote)
{
mRemote = remote;
}
@Override public android.os.IBinder asBinder()
{
return mRemote;
}
public java.lang.String getInterfaceDescriptor()
{
return DESCRIPTOR;
}
@Override public void order() throws android.os.RemoteException
{
android.os.Parcel _data = android.os.Parcel.obtain();
android.os.Parcel _reply = android.os.Parcel.obtain();
try {
_data.writeInterfaceToken(DESCRIPTOR);
mRemote.transact(Stub.TRANSACTION_order, _data, _reply, 0);
_reply.readException();
}
finally {
_reply.recycle();
_data.recycle();
}
}
@Override public void orderAsync() throws android.os.RemoteException
{
android.os.Parcel _data = android.os.Parcel.obtain();
android.os.Parcel _reply = android.os.Parcel.obtain();
try {
_data.writeInterfaceToken(DESCRIPTOR);
mRemote.transact(Stub.TRANSACTION_orderAsync, _data, _reply, 0);
_reply.readException();
}
finally {
_reply.recycle();
_data.recycle();
}
}
@Override public void destroy() throws android.os.RemoteException
{
android.os.Parcel _data = android.os.Parcel.obtain();
android.os.Parcel _reply = android.os.Parcel.obtain();
try {
_data.writeInterfaceToken(DESCRIPTOR);
mRemote.transact(Stub.TRANSACTION_destroy, _data, _reply, 0);
_reply.readException();
}
finally {
_reply.recycle();
_data.recycle();
}
}
@Override public void add(long id) throws android.os.RemoteException
{
android.os.Parcel _data = android.os.Parcel.obtain();
android.os.Parcel _reply = android.os.Parcel.obtain();
try {
_data.writeInterfaceToken(DESCRIPTOR);
_data.writeLong(id);
mRemote.transact(Stub.TRANSACTION_add, _data, _reply, 0);
_reply.readException();
}
finally {
_reply.recycle();
_data.recycle();
}
}
@Override public void edit(long id) throws android.os.RemoteException
{
android.os.Parcel _data = android.os.Parcel.obtain();
android.os.Parcel _reply = android.os.Parcel.obtain();
try {
_data.writeInterfaceToken(DESCRIPTOR);
_data.writeLong(id);
mRemote.transact(Stub.TRANSACTION_edit, _data, _reply, 0);
_reply.readException();
}
finally {
_reply.recycle();
_data.recycle();
}
}
@Override public void delete(java.lang.String mark, int type) throws android.os.RemoteException
{
android.os.Parcel _data = android.os.Parcel.obtain();
android.os.Parcel _reply = android.os.Parcel.obtain();
try {
_data.writeInterfaceToken(DESCRIPTOR);
_data.writeString(mark);
_data.writeInt(type);
mRemote.transact(Stub.TRANSACTION_delete, _data, _reply, 0);
_reply.readException();
}
finally {
_reply.recycle();
_data.recycle();
}
}
@Override public void addContact(long id) throws android.os.RemoteException
{
android.os.Parcel _data = android.os.Parcel.obtain();
android.os.Parcel _reply = android.os.Parcel.obtain();
try {
_data.writeInterfaceToken(DESCRIPTOR);
_data.writeLong(id);
mRemote.transact(Stub.TRANSACTION_addContact, _data, _reply, 0);
_reply.readException();
}
finally {
_reply.recycle();
_data.recycle();
}
}
@Override public void editContact(long id) throws android.os.RemoteException
{
android.os.Parcel _data = android.os.Parcel.obtain();
android.os.Parcel _reply = android.os.Parcel.obtain();
try {
_data.writeInterfaceToken(DESCRIPTOR);
_data.writeLong(id);
mRemote.transact(Stub.TRANSACTION_editContact, _data, _reply, 0);
_reply.readException();
}
finally {
_reply.recycle();
_data.recycle();
}
}
@Override public void deleteContact(java.lang.String mark) throws android.os.RemoteException
{
android.os.Parcel _data = android.os.Parcel.obtain();
android.os.Parcel _reply = android.os.Parcel.obtain();
try {
_data.writeInterfaceToken(DESCRIPTOR);
_data.writeString(mark);
mRemote.transact(Stub.TRANSACTION_deleteContact, _data, _reply, 0);
_reply.readException();
}
finally {
_reply.recycle();
_data.recycle();
}
}
@Override public void sync() throws android.os.RemoteException
{
android.os.Parcel _data = android.os.Parcel.obtain();
android.os.Parcel _reply = android.os.Parcel.obtain();
try {
_data.writeInterfaceToken(DESCRIPTOR);
mRemote.transact(Stub.TRANSACTION_sync, _data, _reply, 0);
_reply.readException();
}
finally {
_reply.recycle();
_data.recycle();
}
}
@Override public void refreshDesktop(int size) throws android.os.RemoteException
{
android.os.Parcel _data = android.os.Parcel.obtain();
android.os.Parcel _reply = android.os.Parcel.obtain();
try {
_data.writeInterfaceToken(DESCRIPTOR);
_data.writeInt(size);
mRemote.transact(Stub.TRANSACTION_refreshDesktop, _data, _reply, 0);
_reply.readException();
}
finally {
_reply.recycle();
_data.recycle();
}
}
@Override public net.qiujuer.tips.factory.service.bean.MissServiceBean getMissBean() throws android.os.RemoteException
{
android.os.Parcel _data = android.os.Parcel.obtain();
android.os.Parcel _reply = android.os.Parcel.obtain();
net.qiujuer.tips.factory.service.bean.MissServiceBean _result;
try {
_data.writeInterfaceToken(DESCRIPTOR);
mRemote.transact(Stub.TRANSACTION_getMissBean, _data, _reply, 0);
_reply.readException();
if ((0!=_reply.readInt())) {
_result = net.qiujuer.tips.factory.service.bean.MissServiceBean.CREATOR.createFromParcel(_reply);
}
else {
_result = null;
}
}
finally {
_reply.recycle();
_data.recycle();
}
return _result;
}
}
static final int TRANSACTION_order = (android.os.IBinder.FIRST_CALL_TRANSACTION + 0);
static final int TRANSACTION_orderAsync = (android.os.IBinder.FIRST_CALL_TRANSACTION + 1);
static final int TRANSACTION_destroy = (android.os.IBinder.FIRST_CALL_TRANSACTION + 2);
static final int TRANSACTION_add = (android.os.IBinder.FIRST_CALL_TRANSACTION + 3);
static final int TRANSACTION_edit = (android.os.IBinder.FIRST_CALL_TRANSACTION + 4);
static final int TRANSACTION_delete = (android.os.IBinder.FIRST_CALL_TRANSACTION + 5);
static final int TRANSACTION_addContact = (android.os.IBinder.FIRST_CALL_TRANSACTION + 6);
static final int TRANSACTION_editContact = (android.os.IBinder.FIRST_CALL_TRANSACTION + 7);
static final int TRANSACTION_deleteContact = (android.os.IBinder.FIRST_CALL_TRANSACTION + 8);
static final int TRANSACTION_sync = (android.os.IBinder.FIRST_CALL_TRANSACTION + 9);
static final int TRANSACTION_refreshDesktop = (android.os.IBinder.FIRST_CALL_TRANSACTION + 10);
static final int TRANSACTION_getMissBean = (android.os.IBinder.FIRST_CALL_TRANSACTION + 11);
}
public void order() throws android.os.RemoteException;
public void orderAsync() throws android.os.RemoteException;
public void destroy() throws android.os.RemoteException;
public void add(long id) throws android.os.RemoteException;
public void edit(long id) throws android.os.RemoteException;
public void delete(java.lang.String mark, int type) throws android.os.RemoteException;
public void addContact(long id) throws android.os.RemoteException;
public void editContact(long id) throws android.os.RemoteException;
public void deleteContact(java.lang.String mark) throws android.os.RemoteException;
public void sync() throws android.os.RemoteException;
public void refreshDesktop(int size) throws android.os.RemoteException;
public net.qiujuer.tips.factory.service.bean.MissServiceBean getMissBean() throws android.os.RemoteException;
}
