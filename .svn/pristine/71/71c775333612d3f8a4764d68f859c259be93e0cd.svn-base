package net.qiujuer.tips.factory.model.db;

import android.content.ContentValues;
import com.raizlabs.android.dbflow.config.DatabaseDefinition;
import com.raizlabs.android.dbflow.config.DatabaseHolder;
import com.raizlabs.android.dbflow.config.FlowManager;
import com.raizlabs.android.dbflow.converter.DateConverter;
import com.raizlabs.android.dbflow.converter.TypeConverter;
import com.raizlabs.android.dbflow.sql.QueryBuilder;
import com.raizlabs.android.dbflow.sql.language.OperatorGroup;
import com.raizlabs.android.dbflow.sql.language.SQLite;
import com.raizlabs.android.dbflow.sql.language.property.IProperty;
import com.raizlabs.android.dbflow.sql.language.property.Property;
import com.raizlabs.android.dbflow.sql.language.property.TypeConvertedProperty;
import com.raizlabs.android.dbflow.sql.language.property.TypeConvertedProperty.TypeConverterGetter;
import com.raizlabs.android.dbflow.structure.ModelAdapter;
import com.raizlabs.android.dbflow.structure.database.DatabaseStatement;
import com.raizlabs.android.dbflow.structure.database.DatabaseWrapper;
import com.raizlabs.android.dbflow.structure.database.FlowCursor;
import java.lang.Class;
import java.lang.IllegalArgumentException;
import java.lang.Integer;
import java.lang.Long;
import java.lang.Number;
import java.lang.Override;
import java.lang.String;
import java.util.Date;
import java.util.UUID;

/**
 * This is generated code. Please do not modify */
public final class ContactModel_Table extends ModelAdapter<ContactModel> {
  /**
   * Primary Key AutoIncrement */
  public static final Property<Long> Id = new Property<Long>(ContactModel.class, "Id");

  public static final TypeConvertedProperty<String, UUID> Mark = new TypeConvertedProperty<String, UUID>(ContactModel.class, "Mark", true,
  new TypeConvertedProperty.TypeConverterGetter() {
  @Override
  public TypeConverter getTypeConverter(Class<?> modelClass) {
    ContactModel_Table adapter = (ContactModel_Table) FlowManager.getInstanceAdapter(modelClass);
  return adapter.typeConverterUUIDConverter;
  }
  });

  public static final Property<String> Name = new Property<String>(ContactModel.class, "Name");

  public static final Property<String> Phone = new Property<String>(ContactModel.class, "Phone");

  public static final Property<String> QQ = new Property<String>(ContactModel.class, "QQ");

  public static final TypeConvertedProperty<Long, Date> Created = new TypeConvertedProperty<Long, Date>(ContactModel.class, "Created", true,
  new TypeConvertedProperty.TypeConverterGetter() {
  @Override
  public TypeConverter getTypeConverter(Class<?> modelClass) {
    ContactModel_Table adapter = (ContactModel_Table) FlowManager.getInstanceAdapter(modelClass);
  return adapter.global_typeConverterDateConverter;
  }
  });

  public static final TypeConvertedProperty<Long, Date> Last = new TypeConvertedProperty<Long, Date>(ContactModel.class, "Last", true,
  new TypeConvertedProperty.TypeConverterGetter() {
  @Override
  public TypeConverter getTypeConverter(Class<?> modelClass) {
    ContactModel_Table adapter = (ContactModel_Table) FlowManager.getInstanceAdapter(modelClass);
  return adapter.global_typeConverterDateConverter;
  }
  });

  public static final Property<Integer> Sex = new Property<Integer>(ContactModel.class, "Sex");

  public static final Property<Integer> Relation = new Property<Integer>(ContactModel.class, "Relation");

  public static final Property<Integer> Status = new Property<Integer>(ContactModel.class, "Status");

  public static final Property<Long> ChangedTime = new Property<Long>(ContactModel.class, "ChangedTime");

  public static final IProperty[] ALL_COLUMN_PROPERTIES = new IProperty[]{Id,Mark,Name,Phone,QQ,Created,Last,Sex,Relation,Status,ChangedTime};

  private final UUIDConverter typeConverterUUIDConverter = new UUIDConverter();

  private final DateConverter global_typeConverterDateConverter;

  public ContactModel_Table(DatabaseHolder holder, DatabaseDefinition databaseDefinition) {
    super(databaseDefinition);
    global_typeConverterDateConverter = (DateConverter) holder.getTypeConverterForClass(Date.class);
  }

  @Override
  public final Class<ContactModel> getModelClass() {
    return ContactModel.class;
  }

  @Override
  public final String getTableName() {
    return "`Contact`";
  }

  @Override
  public final ContactModel newInstance() {
    return new ContactModel();
  }

  @Override
  public final Property getProperty(String columnName) {
    columnName = QueryBuilder.quoteIfNeeded(columnName);
    switch ((columnName)) {
      case "`Id`":  {
        return Id;
      }
      case "`Mark`":  {
        return Mark;
      }
      case "`Name`":  {
        return Name;
      }
      case "`Phone`":  {
        return Phone;
      }
      case "`QQ`":  {
        return QQ;
      }
      case "`Created`":  {
        return Created;
      }
      case "`Last`":  {
        return Last;
      }
      case "`Sex`":  {
        return Sex;
      }
      case "`Relation`":  {
        return Relation;
      }
      case "`Status`":  {
        return Status;
      }
      case "`ChangedTime`":  {
        return ChangedTime;
      }
      default: {
        throw new IllegalArgumentException("Invalid column name passed. Ensure you are calling the correct table's column");
      }
    }
  }

  @Override
  public final void updateAutoIncrement(ContactModel model, Number id) {
    model.setId(id.longValue());
  }

  @Override
  public final Number getAutoIncrementingId(ContactModel model) {
    return model.getId();
  }

  @Override
  public final String getAutoIncrementingColumnName() {
    return "Id";
  }

  @Override
  public final IProperty[] getAllColumnProperties() {
    return ALL_COLUMN_PROPERTIES;
  }

  @Override
  public final void bindToInsertValues(ContentValues values, ContactModel model) {
    String refmark = model.getMark() != null ? typeConverterUUIDConverter.getDBValue(model.getMark()) : null;
    values.put("`Mark`", refmark != null ? refmark : null);
    values.put("`Name`", model.getName() != null ? model.getName() : null);
    values.put("`Phone`", model.getPhone() != null ? model.getPhone() : null);
    values.put("`QQ`", model.getQQNumber() != null ? model.getQQNumber() : null);
    Long refcreate = model.getCreate() != null ? global_typeConverterDateConverter.getDBValue(model.getCreate()) : null;
    values.put("`Created`", refcreate != null ? refcreate : null);
    Long reflast = model.getLast() != null ? global_typeConverterDateConverter.getDBValue(model.getLast()) : null;
    values.put("`Last`", reflast != null ? reflast : null);
    values.put("`Sex`", model.getSex());
    values.put("`Relation`", model.getRelation());
    values.put("`Status`", model.getStatus());
    values.put("`ChangedTime`", model.getChangedTime());
  }

  @Override
  public final void bindToContentValues(ContentValues values, ContactModel model) {
    values.put("`Id`", model.getId());
    bindToInsertValues(values, model);
  }

  @Override
  public final void bindToInsertStatement(DatabaseStatement statement, ContactModel model,
      int start) {
    String refmark = model.getMark() != null ? typeConverterUUIDConverter.getDBValue(model.getMark()) : null;
    statement.bindStringOrNull(1 + start, refmark);
    statement.bindStringOrNull(2 + start, model.getName());
    statement.bindStringOrNull(3 + start, model.getPhone());
    statement.bindStringOrNull(4 + start, model.getQQNumber());
    Long refcreate = model.getCreate() != null ? global_typeConverterDateConverter.getDBValue(model.getCreate()) : null;
    statement.bindNumberOrNull(5 + start, refcreate);
    Long reflast = model.getLast() != null ? global_typeConverterDateConverter.getDBValue(model.getLast()) : null;
    statement.bindNumberOrNull(6 + start, reflast);
    statement.bindLong(7 + start, model.getSex());
    statement.bindLong(8 + start, model.getRelation());
    statement.bindLong(9 + start, model.getStatus());
    statement.bindLong(10 + start, model.getChangedTime());
  }

  @Override
  public final void bindToStatement(DatabaseStatement statement, ContactModel model) {
    int start = 0;
    statement.bindLong(1 + start, model.getId());
    bindToInsertStatement(statement, model, 1);
  }

  @Override
  public final void bindToUpdateStatement(DatabaseStatement statement, ContactModel model) {
    statement.bindLong(1, model.getId());
    String refmark = model.getMark() != null ? typeConverterUUIDConverter.getDBValue(model.getMark()) : null;
    statement.bindStringOrNull(2, refmark);
    statement.bindStringOrNull(3, model.getName());
    statement.bindStringOrNull(4, model.getPhone());
    statement.bindStringOrNull(5, model.getQQNumber());
    Long refcreate = model.getCreate() != null ? global_typeConverterDateConverter.getDBValue(model.getCreate()) : null;
    statement.bindNumberOrNull(6, refcreate);
    Long reflast = model.getLast() != null ? global_typeConverterDateConverter.getDBValue(model.getLast()) : null;
    statement.bindNumberOrNull(7, reflast);
    statement.bindLong(8, model.getSex());
    statement.bindLong(9, model.getRelation());
    statement.bindLong(10, model.getStatus());
    statement.bindLong(11, model.getChangedTime());
    statement.bindLong(12, model.getId());
  }

  @Override
  public final void bindToDeleteStatement(DatabaseStatement statement, ContactModel model) {
    statement.bindLong(1, model.getId());
  }

  @Override
  public final String getInsertStatementQuery() {
    return "INSERT INTO `Contact`(`Mark`,`Name`,`Phone`,`QQ`,`Created`,`Last`,`Sex`,`Relation`,`Status`,`ChangedTime`) VALUES (?,?,?,?,?,?,?,?,?,?)";
  }

  @Override
  public final String getCompiledStatementQuery() {
    return "INSERT INTO `Contact`(`Id`,`Mark`,`Name`,`Phone`,`QQ`,`Created`,`Last`,`Sex`,`Relation`,`Status`,`ChangedTime`) VALUES (?,?,?,?,?,?,?,?,?,?,?)";
  }

  @Override
  public final String getUpdateStatementQuery() {
    return "UPDATE `Contact` SET `Id`=?,`Mark`=?,`Name`=?,`Phone`=?,`QQ`=?,`Created`=?,`Last`=?,`Sex`=?,`Relation`=?,`Status`=?,`ChangedTime`=? WHERE `Id`=?";
  }

  @Override
  public final String getDeleteStatementQuery() {
    return "DELETE FROM `Contact` WHERE `Id`=?";
  }

  @Override
  public final String getCreationQuery() {
    return "CREATE TABLE IF NOT EXISTS `Contact`(`Id` INTEGER PRIMARY KEY AUTOINCREMENT, `Mark` TEXT, `Name` TEXT, `Phone` TEXT, `QQ` TEXT, `Created` TEXT, `Last` TEXT, `Sex` INTEGER, `Relation` INTEGER, `Status` INTEGER, `ChangedTime` INTEGER)";
  }

  @Override
  public final void loadFromCursor(FlowCursor cursor, ContactModel model) {
    model.setId(cursor.getLongOrDefault("Id"));
    int index_Mark = cursor.getColumnIndex("Mark");
    if (index_Mark != -1 && !cursor.isNull(index_Mark)) {
      model.setMark(typeConverterUUIDConverter.getModelValue(cursor.getString(index_Mark)));
    } else {
      model.setMark(typeConverterUUIDConverter.getModelValue(null));
    }
    model.setName(cursor.getStringOrDefault("Name"));
    model.setPhone(cursor.getStringOrDefault("Phone"));
    model.setQQNumber(cursor.getStringOrDefault("QQ"));
    int index_Created = cursor.getColumnIndex("Created");
    if (index_Created != -1 && !cursor.isNull(index_Created)) {
      model.setCreate(global_typeConverterDateConverter.getModelValue(cursor.getLong(index_Created)));
    } else {
      model.setCreate(global_typeConverterDateConverter.getModelValue(null));
    }
    int index_Last = cursor.getColumnIndex("Last");
    if (index_Last != -1 && !cursor.isNull(index_Last)) {
      model.setLast(global_typeConverterDateConverter.getModelValue(cursor.getLong(index_Last)));
    } else {
      model.setLast(global_typeConverterDateConverter.getModelValue(null));
    }
    model.setSex(cursor.getIntOrDefault("Sex"));
    model.setRelation(cursor.getIntOrDefault("Relation"));
    model.setStatus(cursor.getIntOrDefault("Status"));
    model.setChangedTime(cursor.getLongOrDefault("ChangedTime"));
    model.records();
  }

  @Override
  public final boolean exists(ContactModel model, DatabaseWrapper wrapper) {
    return model.getId() > 0
    && SQLite.selectCountOf()
    .from(ContactModel.class)
    .where(getPrimaryConditionClause(model))
    .hasData(wrapper);
  }

  @Override
  public final OperatorGroup getPrimaryConditionClause(ContactModel model) {
    OperatorGroup clause = OperatorGroup.clause();
    clause.and(Id.eq(model.getId()));
    return clause;
  }

  @Override
  public final boolean delete(ContactModel model) {
    boolean successful = super.delete(model);
    if (model.records() != null) {
      ModelAdapter<RecordModel> adapter = FlowManager.getModelAdapter(RecordModel.class);
      adapter.deleteAll(model.records());
    }
    model.recordModels = null;
    return successful;
  }

  @Override
  public final boolean delete(ContactModel model, DatabaseWrapper wrapper) {
    boolean successful = super.delete(model, wrapper);
    if (model.records() != null) {
      ModelAdapter<RecordModel> adapter = FlowManager.getModelAdapter(RecordModel.class);
      adapter.deleteAll(model.records(), wrapper);
    }
    model.recordModels = null;
    return successful;
  }

  @Override
  public final boolean save(ContactModel model) {
    boolean successful = super.save(model);
    if (model.records() != null) {
      ModelAdapter<RecordModel> adapter = FlowManager.getModelAdapter(RecordModel.class);
      adapter.saveAll(model.records());
    }
    return successful;
  }

  @Override
  public final long insert(ContactModel model) {
    long rowId = super.insert(model);
    if (model.records() != null) {
      ModelAdapter<RecordModel> adapter = FlowManager.getModelAdapter(RecordModel.class);
      adapter.insertAll(model.records());
    }
    return rowId;
  }

  @Override
  public final boolean update(ContactModel model) {
    boolean successful = super.update(model);
    if (model.records() != null) {
      ModelAdapter<RecordModel> adapter = FlowManager.getModelAdapter(RecordModel.class);
      adapter.updateAll(model.records());
    }
    return successful;
  }

  @Override
  public final boolean save(ContactModel model, DatabaseWrapper wrapper) {
    boolean successful = super.save(model, wrapper);
    if (model.records() != null) {
      ModelAdapter<RecordModel> adapter = FlowManager.getModelAdapter(RecordModel.class);
      adapter.saveAll(model.records(), wrapper);
    }
    return successful;
  }

  @Override
  public final long insert(ContactModel model, DatabaseWrapper wrapper) {
    long rowId = super.insert(model, wrapper);
    if (model.records() != null) {
      ModelAdapter<RecordModel> adapter = FlowManager.getModelAdapter(RecordModel.class);
      adapter.insertAll(model.records(), wrapper);
    }
    return rowId;
  }

  @Override
  public final boolean update(ContactModel model, DatabaseWrapper wrapper) {
    boolean successful = super.update(model, wrapper);
    if (model.records() != null) {
      ModelAdapter<RecordModel> adapter = FlowManager.getModelAdapter(RecordModel.class);
      adapter.updateAll(model.records(), wrapper);
    }
    return successful;
  }
}
